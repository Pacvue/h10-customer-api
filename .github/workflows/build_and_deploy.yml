name: H10 Customer API Deploy

run-name: "[Env=${{ inputs.profile }}] [Module=${{ inputs.module }}] [Ref=${{ inputs.branch }}/${{ inputs.branch_manually }}]"

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  productline: helium10
  repository: h10-customer-api 
  devops_member: fanyanjie-pacvue, xujunqiang-pacvue, xiayinhai-pacvue
  developer_member: hudongming-pacvue, yuwen-pacvue

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch or Tag'
        required: true
        type: choice
        options:
          - master
          - staging
      module:
        description: 'Module'
        required: true
        type: choice
        options:
          - customer-api
      profile:
        description: 'Env Profile'
        required: true
        type: choice
        options:
          - h10us-test
          - h10us-prod
          - h10us-dev
          - h10us-dev-2
      branch_manually:
        description: 'Manually input branch, if input this, use this first'
        required: false
        type: string
      language_version:
        description: 'java.version'
        required: true
        type: choice
        options:
          - '17'
      autotest_enabled:
        description: "Auto Test On-Off"
        required: true
        type: boolean
        default: false


jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.init_vars.outputs.branch }}
      productline: ${{ steps.init_vars.outputs.productline }}
      repository: ${{ steps.init_vars.outputs.repository }}
      matrix: ${{ steps.init_vars.outputs.matrix }}
    steps:
      - name: Init Vars
        id: init_vars
        shell: python
        run: |
          import os, sys
          cmd = 'echo "productline=${{ env.productline }}" >> $GITHUB_OUTPUT'
          print(cmd)
          os.system(cmd)

          cmd = 'echo "repository=${{ env.repository }}" >> $GITHUB_OUTPUT'
          print(cmd)
          os.system(cmd)

          branch_choice = '${{ inputs.branch }}'
          branch_manually = '${{ inputs.branch_manually }}'
          module = '${{ inputs.module }}'
          profile = '${{ inputs.profile }}'
          
          branch = ''
          if len(branch_manually) == 0:
              branch = branch_choice
          else:
              branch = branch_manually
          cmd = f'echo "branch={branch}" >> $GITHUB_OUTPUT'
          print(cmd)
          os.system(cmd)

          matrix = {}
          matrix['module'] = module.replace(' ','').split(',')
          matrix['profile'] = profile.replace(' ','').split(',')
          cmd = f'echo "matrix={str(matrix)}" >> $GITHUB_OUTPUT'
          print(cmd)
          os.system(cmd)

          devops_member = '${{ env.devops_member }}'.replace(' ','').split(',')
          developer_member = '${{ env.developer_member }}'.replace(' ','').split(',')
          member = devops_member + developer_member
          if 'prod' == matrix['profile'][0].split('-')[1]:
              if '${{ github.actor }}' in member:
                  pass
              else:
                  print('================================')
                  print(f'current user no permission to release versions')
                  sys.exit(1)

  cicd:
    needs: init
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.init.outputs.matrix) }}
    uses: Pacvue/.github/.github/workflows/base_cicd-java.yml@v2
    secrets: inherit
    with:
      autotest_enabled: ${{ inputs.autotest_enabled }}
      module: ${{ matrix.module }}
      profile: ${{ matrix.profile }}
      productline: ${{ needs.init.outputs.productline }}
      repository: ${{ needs.init.outputs.repository }}
      branch: ${{ needs.init.outputs.branch }}
      languague_version: ${{ inputs.language_version }}
      maven_command: mvn -B -f src/pom.xml -Dfile.encoding=UTF-8 clean verify -U -pl ${{ matrix.module }} -am -Dmaven.test.skip=true
      dockerfile: |
        FROM amazoncorretto:${{ inputs.language_version }}
        WORKDIR /app
        COPY src/${{ matrix.module }}/target/*.jar app.jar
