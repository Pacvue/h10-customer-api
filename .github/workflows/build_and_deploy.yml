name: H10 Deploy

run-name: "[Branch=${{ inputs.branch }}/${{ inputs.branch_manually }}] [Env=${{ inputs.profile }}]"

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

env:
  productline: helium10             # 对应helm中的产品线
  repository: h10-customer-api      # 对应helm中的存储库
  devops_member: fanyanjie-pacvue, xujunqiang-pacvue, xiayinhai-pacvue
  developer_member: zhoujunchen-pacvue, wenyu-pacvue        # 配置哪些人有生产发版权限,字符串要严格按照上面的格式

on:
  workflow_dispatch: # 手动触发
    inputs:
      branch:
        description: 'Choice branch to build'
        required: true
        type: choice
        options:
          - master
          - staging
      module:
        description: 'Module'
        required: true
        type: choice
        options:
          - customer-api
      profile:
        description: 'Choice env to deploy'
        required: true
        type: choice
        options:
          - h10us-test
          - h10us-prod
      branch_manually:
        description: 'Manually input branch, if input this, use this first'
        required: false
        type: string
      language_version:
        description: 'java.version'
        required: true
        type: choice
        options:
          - '17'
      autotest_enabled:
        description: '给测试环境启用自动化测试'
        required: true
        type: boolean
        default: false

########################### 我们会尽力把下方的代码做成开发人员不需要关心的 ################################
jobs:
  init:
    # 初始化一些参数
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.init_vars.outputs.branch }}
      productline: ${{ steps.init_vars.outputs.productline }}
      repository: ${{ steps.init_vars.outputs.repository }}
      matrix: ${{ steps.init_vars.outputs.matrix }}
    steps:
      - name: Init Vars
        id: init_vars
        shell: python
        run: |
          import os, sys
          # 输出产品线名称
          cmd = 'echo "productline=${{ env.productline }}" >> $GITHUB_OUTPUT'
          print(cmd)
          os.system(cmd)

          # 输出代码仓库名称
          cmd = 'echo "repository=${{ env.repository }}" >> $GITHUB_OUTPUT'
          print(cmd)
          os.system(cmd)

          # 把输入的变量做成python的格式
          branch_choice = '${{ inputs.branch }}'
          branch_manually = '${{ inputs.branch_manually }}'
          profile = '${{ inputs.profile }}'
          
          # 判断使用哪个分支
          branch = ''
          if len(branch_manually) == 0:
              branch = branch_choice
          else:
              branch = branch_manually
          cmd = f'echo "branch={branch}" >> $GITHUB_OUTPUT'
          print(cmd)
          os.system(cmd)

          matrix = {}
          matrix['module'] = module.replace(' ','').split(',')
          matrix['profile'] = profile.replace(' ','').split(',')
          cmd = f'echo "matrix={str(matrix)}" >> $GITHUB_OUTPUT'
          print(cmd)
          os.system(cmd)

          devops_member = '${{ env.devops_member }}'.replace(' ','').split(',')
          developer_member = '${{ env.developer_member }}'.replace(' ','').split(',')
          member = devops_member + developer_member
          if 'prod' == matrix['profile'][0].split('-')[1]:
              if '${{ github.actor }}' in member:
                  pass
              else:
                  print('================================')
                  print(f'current user no permission to release versions')
                  sys.exit(1)

  cicd:
    needs: init
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.init.outputs.matrix) }}
    uses: Pacvue/.github/.github/workflows/base_cicd-java.yml@v2
    secrets: inherit # 隐式传递secret
    with:
      autotest_enabled: ${{ inputs.autotest_enabled }}
      module: ${{ matrix.module }}
      profile: ${{ matrix.profile }}
      productline: ${{ needs.init.outputs.productline }}
      repository: ${{ needs.init.outputs.repository }}
      branch: ${{ needs.init.outputs.branch }}
      languague_version: ${{ inputs.language_version }}
      maven_command: mvn -B -f src/pom.xml -Dfile.encoding=UTF-8 clean verify -U -pl ${{ matrix.module }} -am -Dmaven.test.skip=true
      dockerfile: |
        FROM amazoncorretto:${{ inputs.language_version }}
        WORKDIR /app
        COPY src/${{ matrix.module }}/target/*.jar app.jar